" -----------------------------------------------------------------------------
" General Settings
" -----------------------------------------------------------------------------

set nocompatible        " Not compatible with the old-fashion vi mode
set bs=2                " Allow backspacing over everything in insert mode
set history=50          " Keep 50 lines of command line history
set ruler               " Show the cursor position all the time
set autoread            " Auto read when file is changed from outside

filetype off            " Necessary to make ftdetect work on Linux
syntax on
filetype on             " Enable filetype detection
filetype indent on      " Enable filetype-specific indenting
filetype plugin on      " Enable filetype-specific plugins

" Auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc

syntax on               " Syntax highlight
set hlsearch            " Search highlighting

if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

packadd sonokai

" The configuration options should be placed before `colorscheme sonokai`.
let g:sonokai_style = 'andromeda' " Available values: 'default', 'atlantis', 'andromeda', 'shusia', 'maia'
let g:sonokai_disable_italic_comment = 1
colorscheme sonokai

set clipboard=unnamed   " Yank to the system register (*) by default
set showmatch           " Cursor shows matching ) and }
set showmode            " Show current mode
set wildchar=<TAB>      " Start wild expansion in the command line using <TAB>
set wildmenu            " Wild char completion menu

" Ignore these files while expanding wild chars
set wildignore=*.o,*.class,*.pyc

set autoindent          " Auto indentation
set incsearch           " Incremental search
set nobackup            " No *~ backup files
set copyindent          " Copy the previous indentation on autoindenting
set ignorecase          " Ignore case when searching
set smartcase           " Ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab            " Insert tabs on the start of a line according to context

set noerrorbells        " Disable sound on errors
set novisualbell
set t_vb=
set tm=500

" TAB setting {
set expandtab           " Replace <TAB> with spaces
set softtabstop=2
set shiftwidth=2

au FileType Makefile set noexpandtab
"}

" Status line {
set laststatus=2
set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \
set statusline+=\ \ \ [%{&ff}/%Y]
set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\
set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L

function! CurDir()
  let curdir = substitute(getcwd(), $HOME, "~", "")
  return curdir
endfunction

function! HasPaste()
  if &paste
    return '[PASTE]'
  else
    return ''
  endif
endfunction

"}

" Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"------------------------------------------------------------------------------
" Tip #382: Search for <cword> and replace with input() in all open buffers
"------------------------------------------------------------------------------
fun! Replace()
  let s:word = input("Replace " . expand('<cword>') . " with:")
  :exe 'bufdo! %s/\<' . expand('<cword>') . '\>/' . s:word . '/ge'
  :unlet! s:word
endfun


"------------------------------------------------------------------------------
" Shortcuts
"------------------------------------------------------------------------------

" Set leader to ,
let mapleader=","
let g:mapleader=","

" Replace the current word in all opened buffers
map <leader>r :call Replace()<CR>

" Open the error console
map <leader>cc :botright cope<CR>
" Move to next error
map <leader>] :cn<CR>
" Move to the prev error
map <leader>[ :cp<CR>

" --- Move around splits {
" Move to and maximize the below split
map <C-J> <C-W>j<C-W>_
" Move to and maximize the above split
map <C-K> <C-W>k<C-W>_
" Move to and maximize the left split
nmap <c-h> <c-w>h<c-w><bar>
" Move to and maximize the right split
nmap <c-l> <c-w>l<c-w><bar>
set wmw=0                     " Set the min width of a window to 0 so we can maximize others
set wmh=0                     " Set the min height of a window to 0 so we can maximize others
" }

" New tab
map <C-t><C-t> :tabnew<CR>
" Close tab
map <C-t><C-w> :tabclose<CR>

" ,/ turn off search highlighting
nmap <leader>/ :nohl<CR>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

" ,p toggles paste mode
nmap <leader>p :set paste!<BAR>set paste?<CR>

" Allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv

" :cd. change working directory to that of the current file
cmap cd. lcd %:p:h

"------------------------------------------------------------------------------
" Programming Shortcuts
"------------------------------------------------------------------------------

" ,g generates the header guard
map <leader>g :call IncludeGuard()<CR>
fun! IncludeGuard()
  let basename = substitute(bufname(""), '.*/', '', '')
  let guard = '_' . substitute(toupper(basename), '\.', '_', "H")
  call append(0, "#ifndef " . guard)
  call append(1, "#define " . guard)
  call append( line("$"), "#endif // for #ifndef " . guard)
endfun

" Enable omni completion. (Ctrl-X Ctrl-O)
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType java set omnifunc=javacomplete#Complete

" Use syntax complete if nothing else available
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
        \ if &omnifunc == "" |
        \  setlocal omnifunc=syntaxcomplete#Complete |
        \ endif
endif

set cot-=preview " Disable doc preview in omnicomplete

" Make CSS omnicompletion work for SASS and SCSS
autocmd BufNewFile,BufRead *.scss             set ft=scss.css
autocmd BufNewFile,BufRead *.sass             set ft=sass.css


"------------------------------------------------------------------------------
" Encoding Settings
"------------------------------------------------------------------------------

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1

fun! ViewUTF8()
  set encoding=utf-8
  set termencoding=big5
endfun

fun! UTF8()
  set encoding=utf-8
  set termencoding=big5
  set fileencoding=utf-8
  set fileencodings=ucs-bom,big5,utf-8,latin1
endfun

fun! Big5()
  set encoding=big5
  set fileencoding=big5
endfun


"------------------------------------------------------------------------------
" Plugin Settings
"------------------------------------------------------------------------------

" --- ALE
let g:ale_linters = {
      \   'javascript': ['eslint'],
      \   'javascriptreact': ['eslint'],
      \   'json': ['jsonlint'],
      \   'ruby': ['rubocop'],
      \   'typescript': ['eslint'],
      \   'typescriptreact': ['eslint'],
      \ }
let g:ale_linters_explicit = 1 " Only run linters named in ale_linters

let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'javascript': ['prettier', 'eslint'],
      \   'javascriptreact': ['prettier', 'eslint'],
      \   'ruby': ['rubocop'],
      \   'typescript': ['prettier', 'eslint'],
      \   'typescriptreact': ['prettier', 'eslint'],
      \ }
let g:ale_fix_on_save = 0

" --- NERDTree
map <C-n><C-n> :NERDTreeToggle<CR>
map <C-n><C-f> :NERDTreeFind<CR>

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" --- vim-gitgutter
" How long (in milliseconds) to wait before updating signs.
" Note this also controls how long vim waits before writing its swap file.
set updatetime=100

" --- test-vim
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let test#ruby#use_binstubs = 0
" let test#strategy = "dispatch_background"
let test#strategy = "vimterminal"

" Generate Vim helper files
" Put these lines at the very end of your vimrc file.
" https://github.com/dense-analysis/ale#generating-vim-help-files

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
